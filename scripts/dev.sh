#!/bin/bash

# Script de desarrollo para Portal de Turismo Inclusivo
# Inicia todos los servicios necesarios para desarrollo

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para limpiar procesos al salir
cleanup() {
    print_status "Deteniendo servicios de desarrollo..."
    pkill -f "npm run dev" || true
    pkill -f "nodemon" || true
    print_success "Servicios detenidos"
    exit 0
}

# Capturar se√±ales de terminaci√≥n
trap cleanup SIGINT SIGTERM

# Verificar si los archivos .env existen
check_env_files() {
    if [ ! -f backend/.env ]; then
        print_error "Archivo backend/.env no encontrado. Ejecuta ./scripts/setup.sh primero."
        exit 1
    fi
    
    if [ ! -f frontend/.env ]; then
        print_error "Archivo frontend/.env no encontrado. Ejecuta ./scripts/setup.sh primero."
        exit 1
    fi
    
    print_success "Archivos de configuraci√≥n encontrados"
}

# Iniciar base de datos
start_database() {
    print_status "Iniciando base de datos..."
    
    if ! docker-compose ps postgres | grep -q "Up"; then
        docker-compose up -d postgres
        print_status "Esperando que la base de datos est√© lista..."
        sleep 10
    else
        print_warning "Base de datos ya est√° ejecut√°ndose"
    fi
    
    print_success "Base de datos lista"
}

# Iniciar backend en modo desarrollo
start_backend() {
    print_status "Iniciando backend en modo desarrollo..."
    
    cd backend
    
    # Verificar si node_modules existe
    if [ ! -d node_modules ]; then
        print_status "Instalando dependencias del backend..."
        npm install
    fi
    
    # Iniciar en background
    npm run dev &
    BACKEND_PID=$!
    
    cd ..
    
    print_success "Backend iniciado (PID: $BACKEND_PID)"
}

# Iniciar frontend en modo desarrollo
start_frontend() {
    print_status "Iniciando frontend en modo desarrollo..."
    
    cd frontend
    
    # Verificar si node_modules existe
    if [ ! -d node_modules ]; then
        print_status "Instalando dependencias del frontend..."
        npm install
    fi
    
    # Iniciar en background
    npm run dev &
    FRONTEND_PID=$!
    
    cd ..
    
    print_success "Frontend iniciado (PID: $FRONTEND_PID)"
}

# Mostrar informaci√≥n de servicios
show_services_info() {
    echo ""
    echo "üéâ ¬°Servicios de desarrollo iniciados!"
    echo ""
    echo "üìã Servicios disponibles:"
    echo "   ‚Ä¢ Frontend: http://localhost:5173"
    echo "   ‚Ä¢ Backend API: http://localhost:3001"
    echo "   ‚Ä¢ Documentaci√≥n API: http://localhost:3001/api-docs"
    echo "   ‚Ä¢ Base de datos: localhost:5432"
    echo ""
    echo "üîß Comandos √∫tiles:"
    echo "   ‚Ä¢ Ver logs del backend: tail -f backend/logs/app.log"
    echo "   ‚Ä¢ Ver logs de Docker: docker-compose logs -f"
    echo "   ‚Ä¢ Detener todo: Ctrl+C"
    echo ""
    echo "üìù Notas:"
    echo "   ‚Ä¢ Los cambios en el c√≥digo se recargan autom√°ticamente"
    echo "   ‚Ä¢ La base de datos se reinicia autom√°ticamente si se detiene"
    echo "   ‚Ä¢ Usa Ctrl+C para detener todos los servicios"
    echo ""
}

# Funci√≥n principal
main() {
    print_status "Iniciando entorno de desarrollo..."
    
    check_env_files
    start_database
    start_backend
    start_frontend
    show_services_info
    
    # Mantener el script ejecut√°ndose
    print_status "Presiona Ctrl+C para detener todos los servicios..."
    wait
}

# Ejecutar funci√≥n principal
main "$@" 