server {
    listen 80;
    server_name localhost;

    # Configuración de seguridad
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Configuración de compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Configuración de archivos estáticos
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Configuración específica para diferentes tipos de archivos
        location ~* \.(css|js)$ {
            expires 1M;
            add_header Cache-Control "public";
        }
        
        location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
            expires 6M;
            add_header Cache-Control "public";
        }
        
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public";
            add_header Access-Control-Allow-Origin "*";
        }
    }

    # Configuración de uploads
    location /uploads/ {
        alias /var/www/uploads/;
        expires 1M;
        add_header Cache-Control "public";
    }

    # Health check endpoint
    location /health {
        proxy_pass http://web:5000/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy para la aplicación Flask
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Configuración de timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Configuración de buffers
        proxy_buffer_size 4k;
        proxy_buffers 4 4k;
        proxy_busy_buffers_size 8k;
        
        # Configuración para WebSocket (si se necesita en el futuro)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Configuración de logs
    access_log /var/log/nginx/tourism_portal_access.log;
    error_log /var/log/nginx/tourism_portal_error.log warn;

    # Configuración de límites
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 65s;
    send_timeout 60s;

    # Configuración de errores personalizados
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        proxy_pass http://web:5000/errors/404;
    }
    
    location = /50x.html {
        internal;
        proxy_pass http://web:5000/errors/500;
    }
}

# Configuración HTTPS (descomentiar si se tiene certificado SSL)
# server {
#     listen 443 ssl http2;
#     server_name localhost;

#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS
#     add_header Strict-Transport-Security "max-age=63072000" always;

#     # Redirigir toda la configuración HTTP aquí
#     include /etc/nginx/conf.d/default.conf;
# }

# Redirección HTTP a HTTPS (descomentiar si se usa HTTPS)
# server {
#     listen 80;
#     server_name localhost;
#     return 301 https://$server_name$request_uri;
# }
