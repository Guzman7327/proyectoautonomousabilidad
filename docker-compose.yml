version: '3.8'

services:
  # Base de datos PostgreSQL con PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: turismo_inclusivo_db
    environment:
      POSTGRES_DB: turismo_inclusivo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - turismo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: ./backend
    container_name: turismo_inclusivo_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/turismo_inclusivo
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:5173
      CORS_CREDENTIALS: true
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - turismo_network
    restart: unless-stopped

  # Frontend React
  frontend:
    build: ./frontend
    container_name: turismo_inclusivo_frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_MAPBOX_TOKEN: your-mapbox-token-here
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - turismo_network
    restart: unless-stopped

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: turismo_inclusivo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - turismo_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  turismo_network:
    driver: bridge 